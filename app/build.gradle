apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "tw.andyang.multipleflavor"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        prod {

        }
        dev {

        }
        mock {

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha8'
    testCompile 'junit:junit:4.12'
}



import java.util.regex.Matcher
import java.util.regex.Pattern
import com.android.build.gradle.AndroidConfig

class ExtraTask extends RuleSource {

    private static def findDefaultFlavors(FileTree fileTree, List validFlavors) {
        Pattern pattern = Pattern.compile("file:.*/src/([^/]+)/java/(.*.java)" + '$')

        def mainRecord = [:]
        def flavorRecord = [] as Set

        fileTree.each {
            Matcher matcher = pattern.matcher(it.toURI().toString());
            if (matcher.matches()) {
                def flavor = matcher.group(1)
                def file = matcher.group(2)
                if(flavor == "main") {
                    mainRecord[file] = it.absolutePath
                }
                if(validFlavors.contains(flavor)) {
                    flavorRecord.add(file)
                }

            }
        }

        def defaults = [:]
        flavorRecord.each {
            defaults[it] = mainRecord[it]
        }
        return defaults

    }

    private static def extractFlavorWithClass(File file) {
        Pattern pattern = Pattern.compile("file:.*/src/([^/]+)/java/(.*).java" + '$');
        Matcher matcher = pattern.matcher(file.toURI().toString());
        if(matcher.matches()){
            return ["flavor" : matcher.group(1), "key" : matcher.group(2), "file" : file.absolutePath]
        }
        return [:]
    }

    @Model
    public AndroidConfig androidConfig(ExtensionContainer container) {
        return container.getByType(AndroidConfig.class);

    }

    @Mutate void patchSourceSet(ModelMap<Task> tasks, AndroidConfig config) {
        tasks.each { 

            // only watching the android-java-compile task
            if (!it.class.name.contains("AndroidJavaCompile")) {
                return 
            }

            def validFlavors = config.productFlavors.collect { it.name }
            def defaultFlavors = findDefaultFlavors(it.project.fileTree("src"), validFlavors)

            def excludes = []
            def record = [:]

            // scaning files in the source-set
            it.source.each {
                // extract the flavor and name of the java source files
                def result = extractFlavorWithClass(it)
                if (result == [:]) {
                    return
                }

                // remember the key name of a file (without the flavor)
                if (!record.containsKey(result['key'])) {
                    record[result['key']] = result
                    return
                }

                // when found a duplicated file,
                // add the main flavor's file to excluding list
                if (record.containsKey(result['key'])) {
                    if(record[result['flavor']] == "main"){
                        excludes.add(record[result['key']].file)
                    }
                }
            }


            println excludes
            // patch the source-set of the compiler
            it.source = it.source.minus(it.project.files(excludes))

        }
    }
}

apply plugin: ExtraTask
